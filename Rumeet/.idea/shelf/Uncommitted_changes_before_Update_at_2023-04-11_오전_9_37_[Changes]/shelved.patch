Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
+++ /dev/null	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="SERIAL_NUMBER" />
-            <value value="RF9MC00KH3J" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-04-09T09:22:51.537244Z" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_1.xml	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
+++ /dev/null	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]1" date="1680495448601" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2023-04-03 오후 1:17 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]/shelved.patch	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
+++ /dev/null	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
@@ -1,17 +0,0 @@
-Index: app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.d204.rumeet.ui.mypage\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.util.Log\r\nimport android.util.LogPrinter\r\nimport com.d204.rumeet.domain.NetworkResult\r\nimport com.d204.rumeet.domain.model.user.MatchingHistoryDomainModel\r\nimport com.d204.rumeet.domain.model.user.NotificationStateDomainModel\r\nimport com.d204.rumeet.domain.model.user.RunningRecordDomainModel\r\nimport com.d204.rumeet.domain.onError\r\nimport com.d204.rumeet.domain.onSuccess\r\nimport com.d204.rumeet.domain.usecase.user.*\r\nimport com.d204.rumeet.ui.base.BaseViewModel\r\nimport com.d204.rumeet.ui.base.UiState\r\nimport com.d204.rumeet.ui.base.successOrNull\r\nimport com.d204.rumeet.ui.mypage.model.*\r\nimport com.d204.rumeet.ui.mypage.setting.SettingAction\r\nimport com.d204.rumeet.ui.mypage.setting.UserInfoAction\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.*\r\nimport kotlinx.coroutines.launch\r\nimport java.lang.Thread.State\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass MyPageViewModel @Inject constructor(\r\n    private val getUserIdUseCase: GetUserIdUseCase,\r\n    private val getUserInfoUseCase: GetUserInfoUseCase,\r\n    private val withdrawalUseCase: WithdrawalUseCase,\r\n    private val getAcquiredBadgeListUseCase: GetAcquiredBadgeListUseCase,\r\n    private val logoutUseCase: LogoutUseCase,\r\n    private val getRunningRecordUseCase: GetRunningRecordUseCase,\r\n    private val getNotificationSettingStateUseCase: GetNotificationSettingStateUseCase,\r\n    private val modifyNotificationSettingStateUseCase: ModifyNotificationSettingStateUseCase,\r\n    private val getMatchingHistoryUseCase: GetMatchingHistoryUseCase\r\n) : BaseViewModel(), MyPageEventHandler {\r\n    private val _myPageNavigationEvent: MutableSharedFlow<MyPageAction> = MutableSharedFlow()\r\n    val myPageNavigationEvent: SharedFlow<MyPageAction> get() = _myPageNavigationEvent.asSharedFlow()\r\n\r\n    private val _settingNavigationEvent: MutableSharedFlow<SettingAction> = MutableSharedFlow()\r\n    val settingNavigationEvent: SharedFlow<SettingAction> get() = _settingNavigationEvent.asSharedFlow()\r\n\r\n    private val _userInfoNavigationEvent: MutableSharedFlow<UserInfoAction> = MutableSharedFlow()\r\n    val userInfoNavigationEvent: SharedFlow<UserInfoAction> get() = _userInfoNavigationEvent.asSharedFlow()\r\n\r\n    private var _myPageMunuList = listOf<String>()\r\n    val myPageMunuList: List<String>\r\n        get() = _myPageMunuList\r\n\r\n    private var _settingOptionList = listOf<String>()\r\n    val settingOptionList: List<String>\r\n        get() = _settingOptionList\r\n\r\n    private var _userInfoOptionList = listOf<String>()\r\n    val userInfoOptionList: List<String>\r\n        get() = _userInfoOptionList\r\n\r\n    private lateinit var _myBadgeList: BadgeContentListUiModel\r\n    val myBadgeList: BadgeContentListUiModel\r\n        get() = _myBadgeList\r\n\r\n    private val _userId: MutableStateFlow<UiState<Int>> = MutableStateFlow(UiState.Loading)\r\n    val userId: StateFlow<UiState<Int>>\r\n        get() = _userId.asStateFlow()\r\n\r\n    private val _userInfo: MutableStateFlow<UiState<UserInfoUiModel>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val userInfo: StateFlow<UiState<UserInfoUiModel>>\r\n        get() = _userInfo.asStateFlow()\r\n\r\n    private val _resultWithdrawal: MutableStateFlow<UiState<Boolean>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val resultWithdrawal: StateFlow<UiState<Boolean>>\r\n        get() = _resultWithdrawal.asStateFlow()\r\n\r\n    private val _acquiredBadgeList: MutableStateFlow<UiState<List<AcquiredBadgeUiModel>>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val acquiredBadgeList: StateFlow<UiState<List<AcquiredBadgeUiModel>>>\r\n        get() = _acquiredBadgeList.asStateFlow()\r\n\r\n    private val _runningRecord: MutableStateFlow<UiState<RunningRecordDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val runningRecord: StateFlow<UiState<RunningRecordDomainModel>>\r\n        get() = _runningRecord\r\n\r\n    private val _notificationSettingState: MutableStateFlow<UiState<NotificationStateDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val notificationSettingState: StateFlow<UiState<NotificationStateDomainModel>>\r\n        get() = _notificationSettingState.asStateFlow()\r\n\r\n    private val _matchingHistoryList: MutableStateFlow<UiState<MatchingHistoryDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val matchingHistoryList: StateFlow<UiState<MatchingHistoryDomainModel>>\r\n        get() = _matchingHistoryList.asStateFlow()\r\n\r\n    fun setSettingNavigate(title: String) {\r\n        baseViewModelScope.launch {\r\n            when (title) {\r\n                myPageMunuList[0] -> _myPageNavigationEvent.emit(MyPageAction.RunningRecord)\r\n                myPageMunuList[1] -> _myPageNavigationEvent.emit(MyPageAction.MatchingHistory)\r\n                myPageMunuList[2] -> _myPageNavigationEvent.emit(MyPageAction.FriendList)\r\n                myPageMunuList[3] -> _myPageNavigationEvent.emit(MyPageAction.BadgeList)\r\n                myPageMunuList[4] -> _myPageNavigationEvent.emit(MyPageAction.EditProfile)\r\n                myPageMunuList[5] -> _myPageNavigationEvent.emit(MyPageAction.Setting)\r\n                myPageMunuList[6] -> _myPageNavigationEvent.emit(MyPageAction.LogOut)\r\n\r\n                settingOptionList[0] -> _settingNavigationEvent.emit(SettingAction.UserInfo)\r\n                settingOptionList[1] -> _settingNavigationEvent.emit(SettingAction.SettingNotification)\r\n                settingOptionList[3] -> _settingNavigationEvent.emit(SettingAction.Privacy)\r\n                settingOptionList[4] -> _settingNavigationEvent.emit(SettingAction.ServiceTerms)\r\n\r\n                userInfoOptionList[5] -> _userInfoNavigationEvent.emit(UserInfoAction.ResetDetailInfo)\r\n                userInfoOptionList[6] -> _userInfoNavigationEvent.emit(UserInfoAction.ResetPassword)\r\n                userInfoOptionList[7] -> _userInfoNavigationEvent.emit(UserInfoAction.Withdrawal)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setMyPageMunuTitleList(list: List<String>) {\r\n        _myPageMunuList = list\r\n        Log.d(TAG, \"setOptionList: $_myPageMunuList\")\r\n    }\r\n\r\n    fun setSettingMenuTitleList(list: List<String>) {\r\n        _settingOptionList = list\r\n    }\r\n\r\n    fun setUserInfoMenuTitleList(list: List<String>) {\r\n        _userInfoOptionList = list\r\n    }\r\n\r\n    fun getUserId() {\r\n        baseViewModelScope.launch {\r\n            try {\r\n                val response = getUserIdUseCase()\r\n                _userId.value = UiState.Success(response)\r\n            } catch (e: Exception) {\r\n                _userId.value = UiState.Error(e.cause)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getUserInfo() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getUserInfoUseCase(userId.value.successOrNull() ?: -1)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _userInfo.value = UiState.Success(it.toUiModel())\r\n                    Log.d(TAG, \"getUserInfo: ${userInfo.value.successOrNull()}\")\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    catchError(it)\r\n                }\r\n        }\r\n    }\r\n\r\n    fun withdrawal() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            try {\r\n                dismissLoading()\r\n                _resultWithdrawal.value =\r\n                    UiState.Success(withdrawalUseCase.invoke(userId.value.successOrNull()!!))\r\n            } catch (e: Exception) {\r\n                _resultWithdrawal.value = UiState.Error(e.cause)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAcquiredBadgeList() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getAcquiredBadgeListUseCase(userId.value.successOrNull()!!)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _acquiredBadgeList.value = UiState.Success(it.map { model -> model.toUiModel() })\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    catchError(it)\r\n                }\r\n        }\r\n    }\r\n\r\n    fun getRunningRecord(startDate: Long, endDate: Long){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getRunningRecordUseCase(userId.value.successOrNull()!!, startDate, endDate)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _runningRecord.value = UiState.Success(it)\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                }\r\n        }\r\n    }\r\n\r\n    fun logout(){\r\n        baseViewModelScope.launch {\r\n            logoutUseCase.invoke()\r\n        }\r\n    }\r\n\r\n    fun getNotificationSettingState(){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getNotificationSettingStateUseCase(userId.value.successOrNull()?:-1)\r\n                .onSuccess {\r\n                    _notificationSettingState.value = UiState.Success(it)\r\n                    dismissLoading()\r\n                }\r\n                .onError {\r\n                    _notificationSettingState.value = UiState.Error(it.cause)\r\n                    dismissLoading()\r\n                }\r\n        }\r\n    }\r\n\r\n    fun modifyNotificationState(target: Int, state: Int){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            val response = modifyNotificationSettingStateUseCase(userId.value.successOrNull()?:-1, target, state)\r\n            if(response) Log.d(TAG, \"modifyNotificationState: 알림 변경 완료\")\r\n        }\r\n    }\r\n\r\n    fun getMatchingHistoryList(){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getMatchingHistoryUseCase(userId.value.successOrNull()!!)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _matchingHistoryList.value = UiState.Success(it)\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    Log.d(TAG, \"getMatchingHistoryList: ${it.cause}\")\r\n                }\r\n        }\r\n    }\r\n\r\n    override fun onClick(title: String) {\r\n        setSettingNavigate(title)\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt b/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt
---- a/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt	(revision 8ae5a51aa912e92a7e5968259091f4b6b94fe01c)
-+++ b/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt	(date 1680494334318)
-@@ -242,4 +242,4 @@
-     override fun onClick(title: String) {
-         setSettingNavigate(title)
-     }
--}
-\ No newline at end of file
-+}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]1/shelved.patch	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
+++ /dev/null	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
@@ -1,17 +0,0 @@
-Index: app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.d204.rumeet.ui.mypage\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.util.Log\r\nimport android.util.LogPrinter\r\nimport com.d204.rumeet.domain.NetworkResult\r\nimport com.d204.rumeet.domain.model.user.MatchingHistoryDomainModel\r\nimport com.d204.rumeet.domain.model.user.NotificationStateDomainModel\r\nimport com.d204.rumeet.domain.model.user.RunningRecordDomainModel\r\nimport com.d204.rumeet.domain.onError\r\nimport com.d204.rumeet.domain.onSuccess\r\nimport com.d204.rumeet.domain.usecase.user.*\r\nimport com.d204.rumeet.ui.base.BaseViewModel\r\nimport com.d204.rumeet.ui.base.UiState\r\nimport com.d204.rumeet.ui.base.successOrNull\r\nimport com.d204.rumeet.ui.mypage.model.*\r\nimport com.d204.rumeet.ui.mypage.setting.SettingAction\r\nimport com.d204.rumeet.ui.mypage.setting.UserInfoAction\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.*\r\nimport kotlinx.coroutines.launch\r\nimport java.lang.Thread.State\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass MyPageViewModel @Inject constructor(\r\n    private val getUserIdUseCase: GetUserIdUseCase,\r\n    private val getUserInfoUseCase: GetUserInfoUseCase,\r\n    private val withdrawalUseCase: WithdrawalUseCase,\r\n    private val getAcquiredBadgeListUseCase: GetAcquiredBadgeListUseCase,\r\n    private val logoutUseCase: LogoutUseCase,\r\n    private val getRunningRecordUseCase: GetRunningRecordUseCase,\r\n    private val getNotificationSettingStateUseCase: GetNotificationSettingStateUseCase,\r\n    private val modifyNotificationSettingStateUseCase: ModifyNotificationSettingStateUseCase,\r\n    private val getMatchingHistoryUseCase: GetMatchingHistoryUseCase\r\n) : BaseViewModel(), MyPageEventHandler {\r\n    private val _myPageNavigationEvent: MutableSharedFlow<MyPageAction> = MutableSharedFlow()\r\n    val myPageNavigationEvent: SharedFlow<MyPageAction> get() = _myPageNavigationEvent.asSharedFlow()\r\n\r\n    private val _settingNavigationEvent: MutableSharedFlow<SettingAction> = MutableSharedFlow()\r\n    val settingNavigationEvent: SharedFlow<SettingAction> get() = _settingNavigationEvent.asSharedFlow()\r\n\r\n    private val _userInfoNavigationEvent: MutableSharedFlow<UserInfoAction> = MutableSharedFlow()\r\n    val userInfoNavigationEvent: SharedFlow<UserInfoAction> get() = _userInfoNavigationEvent.asSharedFlow()\r\n\r\n    private var _myPageMunuList = listOf<String>()\r\n    val myPageMunuList: List<String>\r\n        get() = _myPageMunuList\r\n\r\n    private var _settingOptionList = listOf<String>()\r\n    val settingOptionList: List<String>\r\n        get() = _settingOptionList\r\n\r\n    private var _userInfoOptionList = listOf<String>()\r\n    val userInfoOptionList: List<String>\r\n        get() = _userInfoOptionList\r\n\r\n    private lateinit var _myBadgeList: BadgeContentListUiModel\r\n    val myBadgeList: BadgeContentListUiModel\r\n        get() = _myBadgeList\r\n\r\n    private val _userId: MutableStateFlow<UiState<Int>> = MutableStateFlow(UiState.Loading)\r\n    val userId: StateFlow<UiState<Int>>\r\n        get() = _userId.asStateFlow()\r\n\r\n    private val _userInfo: MutableStateFlow<UiState<UserInfoUiModel>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val userInfo: StateFlow<UiState<UserInfoUiModel>>\r\n        get() = _userInfo.asStateFlow()\r\n\r\n    private val _resultWithdrawal: MutableStateFlow<UiState<Boolean>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val resultWithdrawal: StateFlow<UiState<Boolean>>\r\n        get() = _resultWithdrawal.asStateFlow()\r\n\r\n    private val _acquiredBadgeList: MutableStateFlow<UiState<List<AcquiredBadgeUiModel>>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val acquiredBadgeList: StateFlow<UiState<List<AcquiredBadgeUiModel>>>\r\n        get() = _acquiredBadgeList.asStateFlow()\r\n\r\n    private val _runningRecord: MutableStateFlow<UiState<RunningRecordDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val runningRecord: StateFlow<UiState<RunningRecordDomainModel>>\r\n        get() = _runningRecord\r\n\r\n    private val _notificationSettingState: MutableStateFlow<UiState<NotificationStateDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val notificationSettingState: StateFlow<UiState<NotificationStateDomainModel>>\r\n        get() = _notificationSettingState.asStateFlow()\r\n\r\n    private val _matchingHistoryList: MutableStateFlow<UiState<MatchingHistoryDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val matchingHistoryList: StateFlow<UiState<MatchingHistoryDomainModel>>\r\n        get() = _matchingHistoryList.asStateFlow()\r\n\r\n    fun setSettingNavigate(title: String) {\r\n        baseViewModelScope.launch {\r\n            when (title) {\r\n                myPageMunuList[0] -> _myPageNavigationEvent.emit(MyPageAction.RunningRecord)\r\n                myPageMunuList[1] -> _myPageNavigationEvent.emit(MyPageAction.MatchingHistory)\r\n                myPageMunuList[2] -> _myPageNavigationEvent.emit(MyPageAction.FriendList)\r\n                myPageMunuList[3] -> _myPageNavigationEvent.emit(MyPageAction.BadgeList)\r\n                myPageMunuList[4] -> _myPageNavigationEvent.emit(MyPageAction.EditProfile)\r\n                myPageMunuList[5] -> _myPageNavigationEvent.emit(MyPageAction.Setting)\r\n                myPageMunuList[6] -> _myPageNavigationEvent.emit(MyPageAction.LogOut)\r\n\r\n                settingOptionList[0] -> _settingNavigationEvent.emit(SettingAction.UserInfo)\r\n                settingOptionList[1] -> _settingNavigationEvent.emit(SettingAction.SettingNotification)\r\n                settingOptionList[3] -> _settingNavigationEvent.emit(SettingAction.Privacy)\r\n                settingOptionList[4] -> _settingNavigationEvent.emit(SettingAction.ServiceTerms)\r\n\r\n                userInfoOptionList[5] -> _userInfoNavigationEvent.emit(UserInfoAction.ResetDetailInfo)\r\n                userInfoOptionList[6] -> _userInfoNavigationEvent.emit(UserInfoAction.ResetPassword)\r\n                userInfoOptionList[7] -> _userInfoNavigationEvent.emit(UserInfoAction.Withdrawal)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setMyPageMunuTitleList(list: List<String>) {\r\n        _myPageMunuList = list\r\n        Log.d(TAG, \"setOptionList: $_myPageMunuList\")\r\n    }\r\n\r\n    fun setSettingMenuTitleList(list: List<String>) {\r\n        _settingOptionList = list\r\n    }\r\n\r\n    fun setUserInfoMenuTitleList(list: List<String>) {\r\n        _userInfoOptionList = list\r\n    }\r\n\r\n    fun getUserId() {\r\n        baseViewModelScope.launch {\r\n            try {\r\n                val response = getUserIdUseCase()\r\n                _userId.value = UiState.Success(response)\r\n            } catch (e: Exception) {\r\n                _userId.value = UiState.Error(e.cause)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getUserInfo() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getUserInfoUseCase(userId.value.successOrNull() ?: -1)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _userInfo.value = UiState.Success(it.toUiModel())\r\n                    Log.d(TAG, \"getUserInfo: ${userInfo.value.successOrNull()}\")\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    catchError(it)\r\n                }\r\n        }\r\n    }\r\n\r\n    fun withdrawal() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            try {\r\n                dismissLoading()\r\n                _resultWithdrawal.value =\r\n                    UiState.Success(withdrawalUseCase.invoke(userId.value.successOrNull()!!))\r\n            } catch (e: Exception) {\r\n                _resultWithdrawal.value = UiState.Error(e.cause)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAcquiredBadgeList() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getAcquiredBadgeListUseCase(userId.value.successOrNull()!!)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _acquiredBadgeList.value = UiState.Success(it.map { model -> model.toUiModel() })\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    catchError(it)\r\n                }\r\n        }\r\n    }\r\n\r\n    fun getRunningRecord(startDate: Long, endDate: Long){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getRunningRecordUseCase(userId.value.successOrNull()!!, startDate, endDate)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _runningRecord.value = UiState.Success(it)\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                }\r\n        }\r\n    }\r\n\r\n    fun logout(){\r\n        baseViewModelScope.launch {\r\n            logoutUseCase.invoke()\r\n        }\r\n    }\r\n\r\n    fun getNotificationSettingState(){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getNotificationSettingStateUseCase(userId.value.successOrNull()?:-1)\r\n                .onSuccess {\r\n                    _notificationSettingState.value = UiState.Success(it)\r\n                    dismissLoading()\r\n                }\r\n                .onError {\r\n                    _notificationSettingState.value = UiState.Error(it.cause)\r\n                    dismissLoading()\r\n                }\r\n        }\r\n    }\r\n\r\n    fun modifyNotificationState(target: Int, state: Int){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            val response = modifyNotificationSettingStateUseCase(userId.value.successOrNull()?:-1, target, state)\r\n            if(response) Log.d(TAG, \"modifyNotificationState: 알림 변경 완료\")\r\n        }\r\n    }\r\n\r\n    fun getMatchingHistoryList(){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getMatchingHistoryUseCase(userId.value.successOrNull()!!)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _matchingHistoryList.value = UiState.Success(it)\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    Log.d(TAG, \"getMatchingHistoryList: ${it.cause}\")\r\n                }\r\n        }\r\n    }\r\n\r\n    override fun onClick(title: String) {\r\n        setSettingNavigate(title)\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt b/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt
---- a/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt	(revision 8ae5a51aa912e92a7e5968259091f4b6b94fe01c)
-+++ b/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt	(date 1680495435600)
-@@ -242,4 +242,4 @@
-     override fun onClick(title: String) {
-         setSettingNavigate(title)
-     }
--}
-\ No newline at end of file
-+}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03__1_17__Changes_.xml	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
+++ /dev/null	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]" date="1680495435624" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2023-04-03_오후_1_17_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2023-04-03 오후 1:17 [Changes]" />
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/d204/rumeet/ui/base/BaseFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.d204.rumeet.ui.base\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.databinding.ViewDataBinding\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.navigation.NavDirections\r\nimport androidx.navigation.NavOptions\r\nimport androidx.navigation.fragment.DialogFragmentNavigator\r\nimport androidx.navigation.fragment.FragmentNavigator\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.d204.rumeet.data.remote.dto.InternalServerErrorException\r\nimport com.d204.rumeet.data.remote.dto.ServerNotFoundException\r\nimport com.d204.rumeet.ui.activities.LoginActivity\r\nimport com.d204.rumeet.ui.components.LoadingDialogFragment\r\nimport com.d204.rumeet.util.extension.repeatOnStarted\r\nimport com.google.firebase.analytics.FirebaseAnalytics\r\nimport com.google.firebase.crashlytics.FirebaseCrashlytics\r\nimport kotlinx.coroutines.*\r\nimport kotlinx.coroutines.flow.*\r\n\r\nabstract class BaseFragment<T : ViewDataBinding, R : BaseViewModel> : Fragment() {\r\n\r\n    private var _binding: T? = null\r\n    val binding get() = requireNotNull(_binding)\r\n\r\n    /**\r\n     * setContentView로 호출할 Layout의 리소스 Id.\r\n     * ex) R.layout.activity_main\r\n     */\r\n    abstract val layoutResourceId: Int\r\n\r\n    /**\r\n     * viewModel 로 쓰일 변수.\r\n     */\r\n    abstract val viewModel: R\r\n\r\n    /**\r\n     * 첫번째로 호출.\r\n     * 데이터 바인딩 및 Coroutine 설정.\r\n     * ex) lifecyelScope.launch{}, lifecycleScope.launchWhenStarted{] ..\r\n     */\r\n    abstract fun initStartView()\r\n\r\n    /**\r\n     * 두번째로 호출.\r\n     * 데이터 바인딩 및 rxjava 설정.\r\n     * ex) rxjava observe, databinding observe..\r\n     */\r\n    abstract fun initDataBinding()\r\n\r\n    /**\r\n     * 바인딩 후 작업\r\n     * ex) viewmodel에서 함수실행\r\n     */\r\n    abstract fun initAfterBinding()\r\n\r\n    private var isSetBackButtonValid = false\r\n\r\n    /**\r\n     * Loading Dialog 관련해서 사용할 변수\r\n     */\r\n    private val mLoadingDialog: LoadingDialogFragment by lazy { LoadingDialogFragment() }\r\n\r\n    /**\r\n     * Exception을 처리할 SharedFlow\r\n     */\r\n    protected var exception: SharedFlow<Throwable>? = null\r\n    private var toast: Toast? = null\r\n\r\n    /**\r\n     * Google Analytics 관련 Params\r\n     */\r\n    protected var analytics: FirebaseAnalytics? = null\r\n\r\n    init {\r\n        lifecycleScope.launch {\r\n            repeatOnStarted {\r\n                launch {\r\n                    exception?.collectLatest { exception ->\r\n                        sendException(exception)\r\n                        showToastMessage(exception)\r\n                    }\r\n                }\r\n\r\n                launch {\r\n                    viewModel.errorEvent.collectLatest { e ->\r\n                        sendException(e)\r\n                        dismissLoadingDialog()\r\n                        showToastMessage(e)\r\n                    }\r\n                }\r\n\r\n                launch {\r\n                    viewModel.loadingEvent.collectLatest {\r\n                        if(it) showLoadingDialog()\r\n                        else dismissLoadingDialog()\r\n                    }\r\n                }\r\n\r\n                launch {\r\n                    viewModel.needLoginEvent.collectLatest { loginCheck() }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // FirebaseCrashlytics Exception 보내기\r\n    private fun sendException(throwable: Throwable) {\r\n        val exception = when (throwable) {\r\n            is ServerNotFoundException -> Exception(\"msg -> ${throwable.message}\", throwable)\r\n            is InternalServerErrorException -> Exception(\"msg -> ${throwable.message}\", throwable)\r\n            else -> Exception(throwable)\r\n        }\r\n        FirebaseCrashlytics.getInstance().recordException(exception)\r\n    }\r\n\r\n    // FirebaseAnalytics Screen 보내기\r\n    protected fun sendAnalyticsScreen(screenName: String, screenClass: String) {\r\n        val bundle = Bundle()\r\n        bundle.putString(FirebaseAnalytics.Param.SCREEN_NAME, screenName)\r\n        bundle.putString(FirebaseAnalytics.Param.SCREEN_CLASS, screenClass)\r\n        analytics?.logEvent(FirebaseAnalytics.Event.SCREEN_VIEW, bundle)\r\n    }\r\n\r\n    // FirebaseAnalytics Event 보내기\r\n    protected fun sendAnalyticsEvent(itemId: String, itemName: String) {\r\n        val bundle = Bundle()\r\n        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, itemId)\r\n        bundle.putString(FirebaseAnalytics.Param.SCREEN_CLASS, itemName)\r\n        analytics?.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        _binding = DataBindingUtil.inflate(inflater, layoutResourceId, container, false)\r\n        binding.lifecycleOwner = viewLifecycleOwner\r\n        initStartView()\r\n        initDataBinding()\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        initAfterBinding()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        toast?.cancel()\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    // 로딩 다이얼로그, 즉 로딩창을 띄워줌.\r\n    // 네트워크가 시작될 때 사용자가 무작정 기다리게 하지 않기 위해 작성.\r\n    private fun showLoadingDialog() {\r\n        Log.d(\r\n            \"베이스 뷰모델\",\r\n            \"showLoadingDialog: 로딩 프레그먼트 : ${this.childFragmentManager}, ${this}, ${this.binding}\"\r\n        )\r\n        if (!mLoadingDialog.isAdded) mLoadingDialog.show(childFragmentManager, mLoadingDialog.tag)\r\n    }\r\n\r\n    // 띄워 놓은 로딩 다이얼로그를 없앰.\r\n    private fun dismissLoadingDialog() {\r\n        if(mLoadingDialog.isAdded) mLoadingDialog.dismiss()\r\n    }\r\n\r\n    private fun setLoadingDialog(state : Boolean){\r\n        if(state){\r\n           mLoadingDialog.show(childFragmentManager, mLoadingDialog.tag)\r\n        } else{\r\n           mLoadingDialog.dismiss()\r\n        }\r\n    }\r\n\r\n    // Toast Message 관련 함수\r\n    protected fun showToastMessage(e: Throwable?) {\r\n        toast?.cancel()\r\n        toast =\r\n            Toast.makeText(activity, e?.cause?.message ?: \"알 수 없는 에러가 발생했습니다.\", Toast.LENGTH_SHORT)\r\n                ?.apply { show() }\r\n    }\r\n\r\n    // Toast Message 관련 함수\r\n    protected fun toastMessage(message: String) {\r\n        toast?.cancel()\r\n        toast = Toast.makeText(activity, message, Toast.LENGTH_SHORT)?.apply { show() }\r\n    }\r\n\r\n    // navigation 중복체크 관리 <- checkNavigation 대신 사용할것\r\n    protected fun Fragment.navigate(directions: NavDirections) {\r\n        val controller = findNavController()\r\n        val currentDestination =\r\n            (controller.currentDestination as? FragmentNavigator.Destination)?.className\r\n                ?: (controller.currentDestination as? DialogFragmentNavigator.Destination)?.className\r\n        if (currentDestination == this.javaClass.name) {\r\n            Log.d(\"TAG\", \"navigate: move ${currentDestination}\")\r\n            controller.navigate(directions)\r\n        }\r\n        Log.d(\"TAG\", \"navigate: no move\")\r\n    }\r\n\r\n    // Home 화면으로 이동\r\n    protected fun navigateToHomeFragment(navOptions: NavOptions? = null) {\r\n        val mainFragmentId = com.d204.rumeet.R.id.homeFragment\r\n        if (findNavController().currentDestination?.id != mainFragmentId) {\r\n            findNavController().popBackStack(mainFragmentId, false)\r\n        }\r\n    }\r\n\r\n    // 미 로그인시 로그인 로직\r\n    private fun loginCheck() {\r\n        val intent = Intent(requireActivity(), LoginActivity::class.java)\r\n        registerForActivityResult.launch(intent)\r\n    }\r\n\r\n    private val registerForActivityResult =\r\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n//            if (result.resultCode == 0) navigateToHomeFragment(null)\r\n        }\r\n\r\n    protected fun hideKeyboard() {\r\n        val ime =\r\n            requireActivity().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        ime.hideSoftInputFromWindow(view?.windowToken, 0)\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/d204/rumeet/ui/base/BaseFragment.kt b/app/src/main/java/com/d204/rumeet/ui/base/BaseFragment.kt
--- a/app/src/main/java/com/d204/rumeet/ui/base/BaseFragment.kt	(revision cd55de82129819fa53ebd7ed6349952a27501a65)
+++ b/app/src/main/java/com/d204/rumeet/ui/base/BaseFragment.kt	(date 1681172128151)
@@ -242,5 +242,4 @@
             requireActivity().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
         ime.hideSoftInputFromWindow(view?.windowToken, 0)
     }
-}
-
+}
\ No newline at end of file
