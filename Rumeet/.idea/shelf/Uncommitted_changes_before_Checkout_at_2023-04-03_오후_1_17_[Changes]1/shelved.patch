Index: app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.d204.rumeet.ui.mypage\r\n\r\nimport android.content.ContentValues.TAG\r\nimport android.util.Log\r\nimport android.util.LogPrinter\r\nimport com.d204.rumeet.domain.NetworkResult\r\nimport com.d204.rumeet.domain.model.user.MatchingHistoryDomainModel\r\nimport com.d204.rumeet.domain.model.user.NotificationStateDomainModel\r\nimport com.d204.rumeet.domain.model.user.RunningRecordDomainModel\r\nimport com.d204.rumeet.domain.onError\r\nimport com.d204.rumeet.domain.onSuccess\r\nimport com.d204.rumeet.domain.usecase.user.*\r\nimport com.d204.rumeet.ui.base.BaseViewModel\r\nimport com.d204.rumeet.ui.base.UiState\r\nimport com.d204.rumeet.ui.base.successOrNull\r\nimport com.d204.rumeet.ui.mypage.model.*\r\nimport com.d204.rumeet.ui.mypage.setting.SettingAction\r\nimport com.d204.rumeet.ui.mypage.setting.UserInfoAction\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.flow.*\r\nimport kotlinx.coroutines.launch\r\nimport java.lang.Thread.State\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass MyPageViewModel @Inject constructor(\r\n    private val getUserIdUseCase: GetUserIdUseCase,\r\n    private val getUserInfoUseCase: GetUserInfoUseCase,\r\n    private val withdrawalUseCase: WithdrawalUseCase,\r\n    private val getAcquiredBadgeListUseCase: GetAcquiredBadgeListUseCase,\r\n    private val logoutUseCase: LogoutUseCase,\r\n    private val getRunningRecordUseCase: GetRunningRecordUseCase,\r\n    private val getNotificationSettingStateUseCase: GetNotificationSettingStateUseCase,\r\n    private val modifyNotificationSettingStateUseCase: ModifyNotificationSettingStateUseCase,\r\n    private val getMatchingHistoryUseCase: GetMatchingHistoryUseCase\r\n) : BaseViewModel(), MyPageEventHandler {\r\n    private val _myPageNavigationEvent: MutableSharedFlow<MyPageAction> = MutableSharedFlow()\r\n    val myPageNavigationEvent: SharedFlow<MyPageAction> get() = _myPageNavigationEvent.asSharedFlow()\r\n\r\n    private val _settingNavigationEvent: MutableSharedFlow<SettingAction> = MutableSharedFlow()\r\n    val settingNavigationEvent: SharedFlow<SettingAction> get() = _settingNavigationEvent.asSharedFlow()\r\n\r\n    private val _userInfoNavigationEvent: MutableSharedFlow<UserInfoAction> = MutableSharedFlow()\r\n    val userInfoNavigationEvent: SharedFlow<UserInfoAction> get() = _userInfoNavigationEvent.asSharedFlow()\r\n\r\n    private var _myPageMunuList = listOf<String>()\r\n    val myPageMunuList: List<String>\r\n        get() = _myPageMunuList\r\n\r\n    private var _settingOptionList = listOf<String>()\r\n    val settingOptionList: List<String>\r\n        get() = _settingOptionList\r\n\r\n    private var _userInfoOptionList = listOf<String>()\r\n    val userInfoOptionList: List<String>\r\n        get() = _userInfoOptionList\r\n\r\n    private lateinit var _myBadgeList: BadgeContentListUiModel\r\n    val myBadgeList: BadgeContentListUiModel\r\n        get() = _myBadgeList\r\n\r\n    private val _userId: MutableStateFlow<UiState<Int>> = MutableStateFlow(UiState.Loading)\r\n    val userId: StateFlow<UiState<Int>>\r\n        get() = _userId.asStateFlow()\r\n\r\n    private val _userInfo: MutableStateFlow<UiState<UserInfoUiModel>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val userInfo: StateFlow<UiState<UserInfoUiModel>>\r\n        get() = _userInfo.asStateFlow()\r\n\r\n    private val _resultWithdrawal: MutableStateFlow<UiState<Boolean>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val resultWithdrawal: StateFlow<UiState<Boolean>>\r\n        get() = _resultWithdrawal.asStateFlow()\r\n\r\n    private val _acquiredBadgeList: MutableStateFlow<UiState<List<AcquiredBadgeUiModel>>> =\r\n        MutableStateFlow(UiState.Loading)\r\n    val acquiredBadgeList: StateFlow<UiState<List<AcquiredBadgeUiModel>>>\r\n        get() = _acquiredBadgeList.asStateFlow()\r\n\r\n    private val _runningRecord: MutableStateFlow<UiState<RunningRecordDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val runningRecord: StateFlow<UiState<RunningRecordDomainModel>>\r\n        get() = _runningRecord\r\n\r\n    private val _notificationSettingState: MutableStateFlow<UiState<NotificationStateDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val notificationSettingState: StateFlow<UiState<NotificationStateDomainModel>>\r\n        get() = _notificationSettingState.asStateFlow()\r\n\r\n    private val _matchingHistoryList: MutableStateFlow<UiState<MatchingHistoryDomainModel>> = MutableStateFlow(UiState.Loading)\r\n    val matchingHistoryList: StateFlow<UiState<MatchingHistoryDomainModel>>\r\n        get() = _matchingHistoryList.asStateFlow()\r\n\r\n    fun setSettingNavigate(title: String) {\r\n        baseViewModelScope.launch {\r\n            when (title) {\r\n                myPageMunuList[0] -> _myPageNavigationEvent.emit(MyPageAction.RunningRecord)\r\n                myPageMunuList[1] -> _myPageNavigationEvent.emit(MyPageAction.MatchingHistory)\r\n                myPageMunuList[2] -> _myPageNavigationEvent.emit(MyPageAction.FriendList)\r\n                myPageMunuList[3] -> _myPageNavigationEvent.emit(MyPageAction.BadgeList)\r\n                myPageMunuList[4] -> _myPageNavigationEvent.emit(MyPageAction.EditProfile)\r\n                myPageMunuList[5] -> _myPageNavigationEvent.emit(MyPageAction.Setting)\r\n                myPageMunuList[6] -> _myPageNavigationEvent.emit(MyPageAction.LogOut)\r\n\r\n                settingOptionList[0] -> _settingNavigationEvent.emit(SettingAction.UserInfo)\r\n                settingOptionList[1] -> _settingNavigationEvent.emit(SettingAction.SettingNotification)\r\n                settingOptionList[3] -> _settingNavigationEvent.emit(SettingAction.Privacy)\r\n                settingOptionList[4] -> _settingNavigationEvent.emit(SettingAction.ServiceTerms)\r\n\r\n                userInfoOptionList[5] -> _userInfoNavigationEvent.emit(UserInfoAction.ResetDetailInfo)\r\n                userInfoOptionList[6] -> _userInfoNavigationEvent.emit(UserInfoAction.ResetPassword)\r\n                userInfoOptionList[7] -> _userInfoNavigationEvent.emit(UserInfoAction.Withdrawal)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun setMyPageMunuTitleList(list: List<String>) {\r\n        _myPageMunuList = list\r\n        Log.d(TAG, \"setOptionList: $_myPageMunuList\")\r\n    }\r\n\r\n    fun setSettingMenuTitleList(list: List<String>) {\r\n        _settingOptionList = list\r\n    }\r\n\r\n    fun setUserInfoMenuTitleList(list: List<String>) {\r\n        _userInfoOptionList = list\r\n    }\r\n\r\n    fun getUserId() {\r\n        baseViewModelScope.launch {\r\n            try {\r\n                val response = getUserIdUseCase()\r\n                _userId.value = UiState.Success(response)\r\n            } catch (e: Exception) {\r\n                _userId.value = UiState.Error(e.cause)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getUserInfo() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getUserInfoUseCase(userId.value.successOrNull() ?: -1)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _userInfo.value = UiState.Success(it.toUiModel())\r\n                    Log.d(TAG, \"getUserInfo: ${userInfo.value.successOrNull()}\")\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    catchError(it)\r\n                }\r\n        }\r\n    }\r\n\r\n    fun withdrawal() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            try {\r\n                dismissLoading()\r\n                _resultWithdrawal.value =\r\n                    UiState.Success(withdrawalUseCase.invoke(userId.value.successOrNull()!!))\r\n            } catch (e: Exception) {\r\n                _resultWithdrawal.value = UiState.Error(e.cause)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getAcquiredBadgeList() {\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getAcquiredBadgeListUseCase(userId.value.successOrNull()!!)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _acquiredBadgeList.value = UiState.Success(it.map { model -> model.toUiModel() })\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    catchError(it)\r\n                }\r\n        }\r\n    }\r\n\r\n    fun getRunningRecord(startDate: Long, endDate: Long){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getRunningRecordUseCase(userId.value.successOrNull()!!, startDate, endDate)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _runningRecord.value = UiState.Success(it)\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                }\r\n        }\r\n    }\r\n\r\n    fun logout(){\r\n        baseViewModelScope.launch {\r\n            logoutUseCase.invoke()\r\n        }\r\n    }\r\n\r\n    fun getNotificationSettingState(){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getNotificationSettingStateUseCase(userId.value.successOrNull()?:-1)\r\n                .onSuccess {\r\n                    _notificationSettingState.value = UiState.Success(it)\r\n                    dismissLoading()\r\n                }\r\n                .onError {\r\n                    _notificationSettingState.value = UiState.Error(it.cause)\r\n                    dismissLoading()\r\n                }\r\n        }\r\n    }\r\n\r\n    fun modifyNotificationState(target: Int, state: Int){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            val response = modifyNotificationSettingStateUseCase(userId.value.successOrNull()?:-1, target, state)\r\n            if(response) Log.d(TAG, \"modifyNotificationState: 알림 변경 완료\")\r\n        }\r\n    }\r\n\r\n    fun getMatchingHistoryList(){\r\n        baseViewModelScope.launch {\r\n            showLoading()\r\n            getMatchingHistoryUseCase(userId.value.successOrNull()!!)\r\n                .onSuccess {\r\n                    dismissLoading()\r\n                    _matchingHistoryList.value = UiState.Success(it)\r\n                }\r\n                .onError {\r\n                    dismissLoading()\r\n                    Log.d(TAG, \"getMatchingHistoryList: ${it.cause}\")\r\n                }\r\n        }\r\n    }\r\n\r\n    override fun onClick(title: String) {\r\n        setSettingNavigate(title)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt b/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt
--- a/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt	(revision 8ae5a51aa912e92a7e5968259091f4b6b94fe01c)
+++ b/app/src/main/java/com/d204/rumeet/ui/mypage/MyPageViewModel.kt	(date 1680495435600)
@@ -242,4 +242,4 @@
     override fun onClick(title: String) {
         setSettingNavigate(title)
     }
-}
\ No newline at end of file
+}
